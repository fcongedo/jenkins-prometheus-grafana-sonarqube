pipeline {
    agent any

    environment {
        PROJECT_NAME = 'mi-aplicacion' // Nombre del proyecto
        DOCKER_PORT = '8085'
        DOCKER_COMPOSE_FILE = "${env.WORKSPACE}/app-java/docker-compose.yml"
        SONARQUBE_URL = "${env.SONARQUBE_URL}"
    }

    stages {
        stage("Build Info") {
            steps {
                script {
                    BUILD_TRIGGER_BY = currentBuild.getBuildCauses()[0].userId
                    currentBuild.displayName = "#${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Clonar código fuente') {
            steps {
                checkout scm
            }
        }

        stage('Obtener versión del proyecto') {
            steps {
                script {
                    // Obtener la versión del proyecto de Maven
                    def projectVersion = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                    echo "Versión del proyecto: ${projectVersion}"

                    // Usar la versión del proyecto para etiquetar la imagen Docker u otros usos
                    env.PROJECT_VERSION = projectVersion
                }
            }
        }

        stage('Instalar dependencias') {
            steps {
                dir('app-java') {
                    sh 'mvn clean install -DskipTests'
                }
            }
        }

        stage('Ejecutar pruebas unitarias') {
            steps {
                dir('app-java') {
                    sh 'mvn test'
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Análisis con SonarQube') {
            steps {
                withSonarQubeEnv('sonarqube_server') {
                    dir('app-java') {
                        sh 'mvn sonar:sonar -Dsonar.projectKey=mi-aplicacion -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=$SONAR_AUTH_TOKEN'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Eliminar contenedores y redes existentes si existen
                    echo "Eliminando contenedores y redes existentes..."
                    sh "docker compose -f ${DOCKER_COMPOSE_FILE} down --volumes --remove-orphans"
                    
                    // Eliminar imágenes antiguas (opcional, si necesitas borrar imágenes)
                    echo "Eliminando imágenes antiguas..."
                    sh "docker rmi \$(docker images -q) || true"  // Elimina todas las imágenes, excepto las que están en uso
                    
                    // Construir nuevas imágenes con Docker Compose
                    echo "Construyendo las imágenes con Docker Compose..."
                    sh "docker compose -f ${DOCKER_COMPOSE_FILE} build"
                    
                    // Levantar los contenedores con Docker Compose
                    echo "Levantando contenedores con Docker Compose..."
                    sh "docker compose -f ${DOCKER_COMPOSE_FILE} up -d"
                }
            }   
        }

    }

    post {
        always {
            script {
                // Obtener información del commit
                def commitInfo = getCommitInfo()
                
                // Crear el mensaje de correo
                def body = createEmailBody(commitInfo)
                
                // Subir reportes de pruebas a GitHub
                def repoLink = uploadTestReports(commitInfo)
                
                // Si hay errores de pruebas, agregar link a los reportes en GitHub
                if (repoLink) {
                    body += """
                        <h3>Información de los siguientes Sets de Tests:</h3>
                        <p>Por favor, revisa los reportes completos de las pruebas en el siguiente enlace: <a href='${repoLink}'>Ver reportes</a></p>
                    """
                }

                // Enviar correo
                sendEmail(commitInfo.authorEmail, body)
            }
        }
    }
}

def getCommitInfo() {
    return [
        commit: sh(script: 'git rev-parse HEAD', returnStdout: true).trim(),
        authorName: sh(script: 'git log -1 --pretty=%an', returnStdout: true).trim(),
        commitMessage: sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim(),
        authorEmail: sh(script: 'git log -1 --pretty=%ae', returnStdout: true).trim()
    ]
}

def createEmailBody(commitInfo) {
    return """
        <p>El build ha terminado con el siguiente resultado: ${currentBuild.currentResult}</p>
        <p>Detalles del commit:</p>
        <ul>
            <li><strong>Commit:</strong> ${commitInfo.commit}</li>
            <li><strong>Autor:</strong> ${commitInfo.authorName}</li>
            <li><strong>Mensaje del commit:</strong> ${commitInfo.commitMessage}</li>
        </ul>
    """
}

def uploadTestReports(commitInfo) {
    def date = new Date().format('yyyy-MM-dd-HH-mm-ss')
    def logDir = "${env.WORKSPACE}/logs/test-log-${date}"
    
    // Crear directorio para los logs de pruebas
    sh "mkdir -p ${logDir}"
    sh "cp ${env.WORKSPACE}/app-java/target/surefire-reports/*.txt ${logDir}"

    // Subir los reportes a GitHub
    sh "rm -rf /tmp/test-reports" // Eliminar directorio temporal si existe
    sh "git clone -b reportes-tests https://github.com/fcongedo/jenkins-prometheus-grafana-sonarqube /tmp/test-reports" // Clonar la rama específica
    sh "cp -r ${logDir} /tmp/test-reports/"

    // Verificar los archivos que se subieron
    sh "ls -l /tmp/test-reports/"

    // Realizar commit y push de los archivos
    withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PAT')]) {
        dir('/tmp/test-reports') {
            sh "git config user.name '${commitInfo.authorName}'"
            sh "git config user.email '${commitInfo.authorEmail}'"
            sh "git remote set-url origin https://${GITHUB_USER}:${GITHUB_PAT}@github.com/fcongedo/jenkins-prometheus-grafana-sonarqube.git"
            sh 'git add .'
            sh 'git commit -m "Agregando reportes de prueba"'
            sh 'git push origin reportes-tests' // Asegúrate de usar la rama específica
        }
    }

    // Devolver enlace a la rama con los reportes
    return "https://github.com/fcongedo/jenkins-prometheus-grafana-sonarqube/tree/reportes-tests/test-log-${date}"
}

def sendEmail(String recipientEmail, String body) {
    emailext(
        subject: "Jenkins Build #${BUILD_NUMBER} - ${currentBuild.currentResult}",
        body: body,
        to: recipientEmail, // Usar mail del auto del commit
        mimeType: 'text/html',
        attachmentsPattern: 'app-java/target/surefire-reports/*.txt'
    )
}
