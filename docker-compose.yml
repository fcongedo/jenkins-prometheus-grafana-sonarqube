services:
  jenkins:
    container_name: jenkins
    image: jenkins-custom:latest  # Nombre personalizado de la imagen
    build:
      context: ./jenkins/
      dockerfile: Dockerfile  # Utiliza el Dockerfile que creaste para Jenkins
    ports:
      - "8080:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Montaje del Docker socket
    user: "0:docker"  # Usar el nombre del grupo 'docker'
    environment:
      SONAR_TOKEN: "${SONAR_TOKEN}"  # Variable de entorno para el token de SonarQube
    restart: always
    networks:
      - back-tier
    depends_on:
      - sonarqube

  ssh-agent:
    container_name: ssh-agent
    image: jenkins/ssh-agent
    restart: always
    networks:
      - back-tier

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - back-tier

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    expose:
      - 9100
    networks:
      - back-tier

  sonarqube:
    container_name: sonarqube
    image: sonarqube/sonarqube:latest
    build:
      context: ./sonarqube
      dockerfile: Dockerfile
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    networks:
      - back-tier
    restart: always


  sonar_db:
    container_name: sonar-db
    image: postgres:alpine
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db_data:/var/lib/postgresql/data
    networks:
      - back-tier
    restart: always

  mysql-db:
    container_name: mysql-db
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - back-tier

volumes:
  prometheus_data: {}
  grafana_data: {}
  jenkins_home: {}
  sonarqube_conf: {}
  sonarqube_data: {}
  sonarqube_extensions: {}
  sonarqube_logs: {}
  sonarqube_temp: {}
  sonar_db_data: {}
  mysql_data: {}

networks:
  back-tier:
    external: true